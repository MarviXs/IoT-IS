// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace DataPointFlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DataPointFbs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataPointFbs GetRootAsDataPointFbs(ByteBuffer _bb) { return GetRootAsDataPointFbs(_bb, new DataPointFbs()); }
  public static DataPointFbs GetRootAsDataPointFbs(ByteBuffer _bb, DataPointFbs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataPointFbs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Tag { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTagArray() { return __p.__vector_as_array<byte>(4); }
  public double Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public long Ts { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<DataPointFlatBuffers.DataPointFbs> CreateDataPointFbs(FlatBufferBuilder builder,
      StringOffset tagOffset = default(StringOffset),
      double value = 0.0,
      long ts = 0) {
    builder.StartTable(3);
    DataPointFbs.AddTs(builder, ts);
    DataPointFbs.AddValue(builder, value);
    DataPointFbs.AddTag(builder, tagOffset);
    return DataPointFbs.EndDataPointFbs(builder);
  }

  public static void StartDataPointFbs(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTag(FlatBufferBuilder builder, StringOffset tagOffset) { builder.AddOffset(0, tagOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, double value) { builder.AddDouble(1, value, 0.0); }
  public static void AddTs(FlatBufferBuilder builder, long ts) { builder.AddLong(2, ts, 0); }
  public static Offset<DataPointFlatBuffers.DataPointFbs> EndDataPointFbs(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataPointFlatBuffers.DataPointFbs>(o);
  }
  public DataPointFbsT UnPack() {
    var _o = new DataPointFbsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataPointFbsT _o) {
    _o.Tag = this.Tag;
    _o.Value = this.Value;
    _o.Ts = this.Ts;
  }
  public static Offset<DataPointFlatBuffers.DataPointFbs> Pack(FlatBufferBuilder builder, DataPointFbsT _o) {
    if (_o == null) return default(Offset<DataPointFlatBuffers.DataPointFbs>);
    var _tag = _o.Tag == null ? default(StringOffset) : builder.CreateString(_o.Tag);
    return CreateDataPointFbs(
      builder,
      _tag,
      _o.Value,
      _o.Ts);
  }
}

public class DataPointFbsT
{
  public string Tag { get; set; }
  public double Value { get; set; }
  public long Ts { get; set; }

  public DataPointFbsT() {
    this.Tag = null;
    this.Value = 0.0;
    this.Ts = 0;
  }
}


static public class DataPointFbsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Tag*/, false)
      && verifier.VerifyField(tablePos, 6 /*Value*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Ts*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
