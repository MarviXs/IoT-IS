// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace JobFlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct JobFbs : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static JobFbs GetRootAsJobFbs(ByteBuffer _bb) { return GetRootAsJobFbs(_bb, new JobFbs()); }
  public static JobFbs GetRootAsJobFbs(ByteBuffer _bb, JobFbs obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JobFbs __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string JobId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJobIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetJobIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetJobIdArray() { return __p.__vector_as_array<byte>(4); }
  public JobFlatBuffers.CommandFbs? Commands(int j) { int o = __p.__offset(6); return o != 0 ? (JobFlatBuffers.CommandFbs?)(new JobFlatBuffers.CommandFbs()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CommandsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public JobFlatBuffers.JobStatusFbsEnum Status { get { int o = __p.__offset(8); return o != 0 ? (JobFlatBuffers.JobStatusFbsEnum)__p.bb.GetSbyte(o + __p.bb_pos) : JobFlatBuffers.JobStatusFbsEnum.JOB_QUEUED; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public int CurrentStep { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalSteps { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurrentCycle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalCycles { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Paused { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long StartedAt { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FinishedAt { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<JobFlatBuffers.JobFbs> CreateJobFbs(FlatBufferBuilder builder,
      StringOffset job_idOffset = default(StringOffset),
      VectorOffset commandsOffset = default(VectorOffset),
      JobFlatBuffers.JobStatusFbsEnum status = JobFlatBuffers.JobStatusFbsEnum.JOB_QUEUED,
      StringOffset nameOffset = default(StringOffset),
      int current_step = 0,
      int total_steps = 0,
      int current_cycle = 0,
      int total_cycles = 0,
      bool paused = false,
      long started_at = 0,
      long finished_at = 0) {
    builder.StartTable(11);
    JobFbs.AddFinishedAt(builder, finished_at);
    JobFbs.AddStartedAt(builder, started_at);
    JobFbs.AddTotalCycles(builder, total_cycles);
    JobFbs.AddCurrentCycle(builder, current_cycle);
    JobFbs.AddTotalSteps(builder, total_steps);
    JobFbs.AddCurrentStep(builder, current_step);
    JobFbs.AddName(builder, nameOffset);
    JobFbs.AddCommands(builder, commandsOffset);
    JobFbs.AddJobId(builder, job_idOffset);
    JobFbs.AddPaused(builder, paused);
    JobFbs.AddStatus(builder, status);
    return JobFbs.EndJobFbs(builder);
  }

  public static void StartJobFbs(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddJobId(FlatBufferBuilder builder, StringOffset jobIdOffset) { builder.AddOffset(0, jobIdOffset.Value, 0); }
  public static void AddCommands(FlatBufferBuilder builder, VectorOffset commandsOffset) { builder.AddOffset(1, commandsOffset.Value, 0); }
  public static VectorOffset CreateCommandsVector(FlatBufferBuilder builder, Offset<JobFlatBuffers.CommandFbs>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, Offset<JobFlatBuffers.CommandFbs>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<JobFlatBuffers.CommandFbs>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCommandsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<JobFlatBuffers.CommandFbs>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCommandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStatus(FlatBufferBuilder builder, JobFlatBuffers.JobStatusFbsEnum status) { builder.AddSbyte(2, (sbyte)status, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddCurrentStep(FlatBufferBuilder builder, int currentStep) { builder.AddInt(4, currentStep, 0); }
  public static void AddTotalSteps(FlatBufferBuilder builder, int totalSteps) { builder.AddInt(5, totalSteps, 0); }
  public static void AddCurrentCycle(FlatBufferBuilder builder, int currentCycle) { builder.AddInt(6, currentCycle, 0); }
  public static void AddTotalCycles(FlatBufferBuilder builder, int totalCycles) { builder.AddInt(7, totalCycles, 0); }
  public static void AddPaused(FlatBufferBuilder builder, bool paused) { builder.AddBool(8, paused, false); }
  public static void AddStartedAt(FlatBufferBuilder builder, long startedAt) { builder.AddLong(9, startedAt, 0); }
  public static void AddFinishedAt(FlatBufferBuilder builder, long finishedAt) { builder.AddLong(10, finishedAt, 0); }
  public static Offset<JobFlatBuffers.JobFbs> EndJobFbs(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<JobFlatBuffers.JobFbs>(o);
  }
}


static public class JobFbsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*JobId*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Commands*/, JobFlatBuffers.CommandFbsVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*Status*/, 1 /*JobFlatBuffers.JobStatusFbsEnum*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyField(tablePos, 12 /*CurrentStep*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*TotalSteps*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CurrentCycle*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*TotalCycles*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Paused*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*StartedAt*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*FinishedAt*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
