// <auto-generated />
using System;
using System.Collections.Generic;
using Fei.Is.Api.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fei.Is.Api.Data.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029180227_RemoveShared")]
    partial class RemoveShared
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.CollectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CollectionParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeviceCollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubCollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CollectionParentId");

                    b.HasIndex("DeviceCollectionId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SubCollectionId");

                    b.ToTable("CollectionItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.CollectionShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("CollectionShare");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Command", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<double>>("Params")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentFirmwareVersion")
                        .HasColumnType("text");

                    b.Property<int?>("DataPointRetentionDays")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mac")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Protocol")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .IsUnique();

                    b.HasIndex("DeviceTemplateId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RootCollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RootCollectionId");

                    b.ToTable("DeviceCollections");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Cycles")
                        .HasColumnType("integer");

                    b.Property<Guid>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInfinite")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecipeOffId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecipeOnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SensorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("RecipeOffId");

                    b.HasIndex("RecipeOnId");

                    b.HasIndex("SensorId");

                    b.ToTable("DeviceControls");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceFirmware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VersionNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId", "VersionNumber")
                        .IsUnique();

                    b.ToTable("DeviceFirmwares");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<Guid>("SharedToUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SharedToUserId");

                    b.ToTable("DeviceShares");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableGrid")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMap")
                        .HasColumnType("boolean");

                    b.Property<int?>("GridColumnSpan")
                        .HasColumnType("integer");

                    b.Property<int?>("GridRowSpan")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("DeviceTemplates");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.AdditionalOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Company")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Year")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("AdditionalOrders");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dic")
                        .HasColumnType("text");

                    b.Property<string>("Ic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Psc")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.DeliveryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeliveryNoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("PackSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlantPassport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PluCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPriceWithoutVat")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPriceWithoutVat")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryNoteId");

                    b.ToTable("DeliveryItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.DeliveryNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Forwarded")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Took")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmountWithVat")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VatGroup15")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VatGroup21")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VatTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PluCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryWeek")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderItemContainerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemContainerId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.OrderItemContainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PricePerContainer")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItemContainers");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BulbPlantingDistanceCm")
                        .HasColumnType("text");

                    b.Property<string>("BulbPlantingPeriod")
                        .HasColumnType("text");

                    b.Property<string>("BulbPlantingRequirementSqM")
                        .HasColumnType("text");

                    b.Property<string>("CCode")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CultivationTemperatureC")
                        .HasColumnType("text");

                    b.Property<string>("CultivationTimeForBulbsWeeks")
                        .HasColumnType("text");

                    b.Property<string>("CultivationTimeFromYoungPlant")
                        .HasColumnType("text");

                    b.Property<string>("CultivationTimeSowingToPlant")
                        .HasColumnType("text");

                    b.Property<string>("CultivationTimeVegetableWeek")
                        .HasColumnType("text");

                    b.Property<string>("CzechName")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountedPriceWithoutVAT")
                        .HasColumnType("numeric");

                    b.Property<string>("FlowerLeafDescription")
                        .HasColumnType("text");

                    b.Property<bool?>("FlowersInFirstYear")
                        .HasColumnType("boolean");

                    b.Property<string>("GerminationTemperatureC")
                        .HasColumnType("text");

                    b.Property<string>("GerminationTimeDays")
                        .HasColumnType("text");

                    b.Property<int?>("GreenhouseNumber")
                        .HasColumnType("integer");

                    b.Property<bool?>("GrowthInhibitorsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("HeightCm")
                        .HasColumnType("text");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NaturalFloweringMonth")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfBulbsPerPot")
                        .HasColumnType("text");

                    b.Property<string>("PLUCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlantSpacingCm")
                        .HasColumnType("text");

                    b.Property<string>("PlantingDensity")
                        .HasColumnType("text");

                    b.Property<string>("PotDiameterPack")
                        .HasColumnType("text");

                    b.Property<string>("PotSizeCm")
                        .HasColumnType("text");

                    b.Property<decimal?>("PricePerPiecePack")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RetailPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("SeedSpacingCM")
                        .HasColumnType("text");

                    b.Property<string>("SeedsMioHa")
                        .HasColumnType("text");

                    b.Property<string>("SeedsPerThousandPlants")
                        .HasColumnType("text");

                    b.Property<string>("SeedsPerThousandPots")
                        .HasColumnType("text");

                    b.Property<string>("SowingPeriod")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VATCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PLUCode")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("VATCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.ProductionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("CbQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryWeek")
                        .HasColumnType("integer");

                    b.Property<int>("M10")
                        .HasColumnType("integer");

                    b.Property<int>("M6")
                        .HasColumnType("integer");

                    b.Property<int>("OrderedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Pack10")
                        .HasColumnType("integer");

                    b.Property<int>("Pack6")
                        .HasColumnType("integer");

                    b.Property<int>("Pot10")
                        .HasColumnType("integer");

                    b.Property<int>("Pot12")
                        .HasColumnType("integer");

                    b.Property<int>("Pot14")
                        .HasColumnType("integer");

                    b.Property<int>("Pot17")
                        .HasColumnType("integer");

                    b.Property<int>("Pot21")
                        .HasColumnType("integer");

                    b.Property<int>("Pot9")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("S84")
                        .HasColumnType("integer");

                    b.Property<int>("StoreQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("StrQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("TabQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VolyneQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<int>("Z")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductionPlans");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.SystemSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocalFileName")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.VATCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("VATCategories");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.WorkDayDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RateA")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RateB")
                        .HasColumnType("numeric");

                    b.Property<int>("TaskNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalA")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalEquipment")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkHours")
                        .HasColumnType("integer");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkReportId");

                    b.ToTable("WorkDayDetails");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.WorkReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("WorkReports");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentCycle")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInfinite")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Paused")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCycles")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("OriginalCommandId")
                        .HasColumnType("uuid");

                    b.Property<List<double>>("Params")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobCommands");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Cycles")
                        .HasColumnType("integer");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Interval")
                        .HasColumnType("integer");

                    b.Property<int?>("IntervalValue")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RecipeId");

                    b.ToTable("JobSchedules");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobScheduleWeekDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<Guid>("JobScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobScheduleId", "Day")
                        .IsUnique();

                    b.ToTable("JobScheduleWeekDays");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Columns")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EditorBoardID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GreenHouseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PosX")
                        .HasColumnType("integer");

                    b.Property<int>("PosY")
                        .HasColumnType("integer");

                    b.Property<int>("Rows")
                        .HasColumnType("integer");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("EditorPots");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorPlant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentDay")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EditorBoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GreenHouseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlantID")
                        .HasColumnType("uuid");

                    b.Property<int>("PosX")
                        .HasColumnType("integer");

                    b.Property<int>("PosY")
                        .HasColumnType("integer");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EditorBoardId");

                    b.HasIndex("GreenHouseId");

                    b.ToTable("EditorPlants");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.GreenHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<Guid>("GreenHouseID")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Greenhouses");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePlanted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PlantBoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlantBoardId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.PlantAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LeafCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("PlantAnalyses");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.PlantBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cols")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlantBoardId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rows")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PlantBoards");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.RecipeStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Cycles")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubrecipeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommandId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SubrecipeId");

                    b.ToTable("RecipeSteps");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpiresAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<double>("CooldownAfterTriggerTime")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastTriggeredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.SceneNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uuid");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneNotifications");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.SceneSensorTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uuid");

                    b.Property<string>("SensorTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SceneId", "DeviceId", "SensorTag")
                        .IsUnique();

                    b.ToTable("SceneSensorTriggers");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AccuracyDecimals")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTemplateId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.CollectionItem", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceCollection", "CollectionParent")
                        .WithMany("ChildItems")
                        .HasForeignKey("CollectionParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.DeviceCollection", null)
                        .WithMany("AllCollectionsFlat")
                        .HasForeignKey("DeviceCollectionId");

                    b.HasOne("Fei.Is.Api.Data.Models.Device", "Device")
                        .WithMany("CollectionItems")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fei.Is.Api.Data.Models.DeviceCollection", "SubCollection")
                        .WithMany("ParentItems")
                        .HasForeignKey("SubCollectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CollectionParent");

                    b.Navigation("Device");

                    b.Navigation("SubCollection");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.CollectionShare", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceCollection", "Collection")
                        .WithMany("CollectionShares")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "User")
                        .WithMany("CollectionShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Command", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Commands")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceTemplate");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Device", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Devices")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceTemplate");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceCollection", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.DeviceCollection", "RootCollection")
                        .WithMany()
                        .HasForeignKey("RootCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RootCollection");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceControl", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Controls")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "RecipeOff")
                        .WithMany()
                        .HasForeignKey("RecipeOffId");

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "RecipeOn")
                        .WithMany()
                        .HasForeignKey("RecipeOnId");

                    b.HasOne("Fei.Is.Api.Data.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId");

                    b.Navigation("DeviceTemplate");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeOff");

                    b.Navigation("RecipeOn");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceFirmware", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Firmwares")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceTemplate");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceShare", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Device", "Device")
                        .WithMany("SharedWithUsers")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "SharedToUser")
                        .WithMany()
                        .HasForeignKey("SharedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("SharedToUser");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceTemplate", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "Owner")
                        .WithMany("DeviceTemplates")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.AdditionalOrder", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.DeliveryItem", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.DeliveryNote", null)
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DeliveryNoteId");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.DeliveryNote", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Invoice", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.InvoiceItem", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Invoice", null)
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Order", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.OrderItem", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.OrderItemContainer", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderItemContainerId");

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.OrderItemContainer", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Order", null)
                        .WithMany("ItemContainers")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Product", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.VATCategory", "VATCategory")
                        .WithMany()
                        .HasForeignKey("VATCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("VATCategory");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.ProductionPlan", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Summary", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.WorkDayDetail", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.WorkReport", null)
                        .WithMany("WorkDayDetails")
                        .HasForeignKey("WorkReportId");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.WorkReport", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.InformationSystem.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Job", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Device", "Device")
                        .WithMany("Jobs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobCommand", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Job", "Job")
                        .WithMany("Commands")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobSchedule", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Device", "Device")
                        .WithMany("JobSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobScheduleWeekDay", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.JobSchedule", "JobSchedule")
                        .WithMany("WeekDays")
                        .HasForeignKey("JobScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSchedule");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorBoard", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.LifeCycleSystem.GreenHouse", "GreenHouse")
                        .WithMany("Pots")
                        .HasForeignKey("GreenHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GreenHouse");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorPlant", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorBoard", null)
                        .WithMany("Plants")
                        .HasForeignKey("EditorBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.LifeCycleSystem.GreenHouse", "GreenHouse")
                        .WithMany("Plants")
                        .HasForeignKey("GreenHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GreenHouse");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.Plant", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.LifeCycleSystem.PlantBoard", "PlantBoard")
                        .WithMany("Plants")
                        .HasForeignKey("PlantBoardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("PlantBoard");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.PlantAnalysis", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.LifeCycleSystem.Plant", "Plant")
                        .WithMany("Analyses")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Recipe", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Recipes")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceTemplate");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.RecipeStep", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Command", "Command")
                        .WithMany("RecipeSteps")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.Recipe", "Subrecipe")
                        .WithMany("ParentSteps")
                        .HasForeignKey("SubrecipeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Command");

                    b.Navigation("Recipe");

                    b.Navigation("Subrecipe");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Scene", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Fei.Is.Api.Data.Models.SceneAction", "Actions", b1 =>
                        {
                            b1.Property<Guid>("SceneId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<Guid?>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DiscordWebhookUrl")
                                .HasColumnType("text");

                            b1.Property<bool>("IncludeSensorValues")
                                .HasColumnType("boolean");

                            b1.Property<string>("NotificationMessage")
                                .HasColumnType("text");

                            b1.Property<int>("NotificationSeverity")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("RecipeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("SceneId", "Id");

                            b1.ToTable("Scenes");

                            b1.ToJson("Actions");

                            b1.WithOwner()
                                .HasForeignKey("SceneId");
                        });

                    b.Navigation("Actions");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.SceneNotification", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.SceneSensorTrigger", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fei.Is.Api.Data.Models.Scene", "Scene")
                        .WithMany("SensorTriggers")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Sensor", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.DeviceTemplate", "DeviceTemplate")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Fei.Is.Api.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("CollectionShares");

                    b.Navigation("DeviceTemplates");

                    b.Navigation("Devices");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Command", b =>
                {
                    b.Navigation("RecipeSteps");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Device", b =>
                {
                    b.Navigation("CollectionItems");

                    b.Navigation("JobSchedules");

                    b.Navigation("Jobs");

                    b.Navigation("SharedWithUsers");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceCollection", b =>
                {
                    b.Navigation("AllCollectionsFlat");

                    b.Navigation("ChildItems");

                    b.Navigation("CollectionShares");

                    b.Navigation("ParentItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.DeviceTemplate", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Controls");

                    b.Navigation("Devices");

                    b.Navigation("Firmwares");

                    b.Navigation("Recipes");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.DeliveryNote", b =>
                {
                    b.Navigation("DeliveryItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.Order", b =>
                {
                    b.Navigation("ItemContainers");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.OrderItemContainer", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.InformationSystem.WorkReport", b =>
                {
                    b.Navigation("WorkDayDetails");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Job", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.JobSchedule", b =>
                {
                    b.Navigation("WeekDays");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.EditorBoard", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.GreenHouse", b =>
                {
                    b.Navigation("Plants");

                    b.Navigation("Pots");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.Plant", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.LifeCycleSystem.PlantBoard", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Recipe", b =>
                {
                    b.Navigation("ParentSteps");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Fei.Is.Api.Data.Models.Scene", b =>
                {
                    b.Navigation("SensorTriggers");
                });
#pragma warning restore 612, 618
        }
    }
}
